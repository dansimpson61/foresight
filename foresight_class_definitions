[cite_start]Following the principles of joyful development—where code is expressive, clear, and has a sense of "rightness"—here are definitions for the object classes in our retirement income domain model, tailored for a husband and wife. [cite: 6, 13]

[cite_start]Each class is designed with a clear and focused purpose, promoting a structure that is both easy to understand and maintain. [cite: 18, 28]

---

### **1. `Person`**
This class represents an individual. It holds information unique to one person.

* **Attributes:**
    * `name`: The person's name, for clarity in reports.
    * `date_of_birth`: The person's birth date, used to calculate age-related rules like RMDs.
* **Behaviors:**
    * `age_in(year)`: Calculates the person's age for a given year.
    * `is_rmd_eligible_in(year)`: Simply answers whether this person has reached the age where Required Minimum Distributions begin.

### **2. `Household`**
This class represents the couple as a single financial entity. It is the central object that holds their collective goals and assets.

* **Attributes:**
    * `members`: A collection of the `Person` objects in the household.
    * `filing_status`: Their tax filing status, typically 'Married Filing Jointly'.
    * `state_of_residence`: Their home state, e.g., 'New York', which dictates state tax rules.
    * `accounts`: A collection of all their financial `Account` objects.
    * `income_sources`: A collection of their recurring `IncomeSource` objects.
    * `target_spending`: The annual after-tax income goal they wish to achieve.
    * `desired_tax_bracket_ceiling`: The highest federal tax bracket they are comfortable filling each year, which guides the "act for all time" strategy.
* **Behaviors:**
    * `assets_by_type`: Provides a summary of total assets, grouped by tax type (pre-tax, post-tax, taxable).
    * `determine_annual_rmd(year)`: Calculates the total RMD the household must take for a given year by summing the RMDs for each eligible member and their accounts.

### **3. `Account` (and its types)**
This represents a financial account. [cite_start]Each type of account "knows" its own tax rules, embodying the principle of encapsulation. [cite: 27]

* **`TraditionalIRA`**
    * **Attributes:** `owner` (the `Person` who owns it), `balance`.
    * **Behaviors:**
        * `withdraw(amount)`: Returns the cash amount and reports the full amount as taxable income.
        * `convert_to_roth(amount)`: Simulates a conversion, reducing its balance and reporting the amount as taxable income.
        * `calculate_rmd(owner_age)`: Calculates its RMD based on the owner's age and the IRS life expectancy tables.

* **`RothIRA`**
    * **Attributes:** `owner`, `balance`, `is_qualified` (a boolean based on age and 5-year rule).
    * **Behaviors:**
        * `withdraw(amount)`: Returns the cash amount and reports zero taxable income if `is_qualified` is true.

* **`TaxableBrokerage`**
    * **Attributes:** `owners`, `balance`, `total_cost_basis`.
    * **Behaviors:**
        * `withdraw(amount)`: Returns the cash amount and reports the proportional capital gain as investment income.

### **4. `IncomeSource` (and its types)**
This represents a stream of recurring income. Like accounts, each type understands its unique tax treatment.

* **`Pension`**
    * **Attributes:** `recipient` (the `Person`), `annual_payout`.
    * **Behaviors:**
        * `taxable_amount(state, recipient_age)`: Returns the taxable portion of the payout, applying state-specific rules (like the NYS `$20,000` exclusion).

* **`SocialSecurityBenefit`**
    * **Attributes:** `recipient`, `annual_benefit`.
    * **Behaviors:**
        * `federal_taxable_amount(provisional_income)`: Returns the portion of the benefit that is subject to federal income tax based on the provisional income formula. It "knows" that its NYS taxable amount is always zero.

### **5. `TaxYear`**
This class acts as the rulebook for a single year. It holds all the tax parameters, keeping them separate from the people and their money.

* **Attributes:**
    * `year`: The calendar year, e.g., 2025.
    * `federal_law`: An object containing the federal tax brackets, standard deduction, and other rules for the year.
    * `state_law`: An object containing the tax rules for the household's state of residence.
* **Behaviors:**
    * `calculate_liability(income_details)`: Takes a detailed income summary and calculates the final federal and state tax owed.
    * `calculate_magi(income_details)`: Calculates the Modified Adjusted Gross Income to check against IRMAA thresholds.

### **6. `AnnualPlanner`**
This is the conductor of the orchestra. [cite_start]It uses all the other objects to perform the annual retirement plan, making the process smooth and effortless. [cite: 14]

* **Attributes:**
    * `household`: The `Household` to plan for.
    * `tax_year`: The `TaxYear` providing the rules.
* **Behaviors:**
    * `generate_plan()`: This single, clear method executes the entire annual strategy:
        1.  It first determines all non-discretionary income (RMDs, Pensions, Social Security).
        2.  It then executes the "act for all time" step by calculating `Tax_Bracket_Headroom` and performing a strategic `Roth_Conversion` if beneficial.
        3.  Next, it calculates the `Remaining_Spending_Need`.
        4.  Finally, it executes the "preserve the best asset" withdrawal strategy to meet that need.
        5.  It returns a simple, readable summary of the year's financial events.

***

Applying the principle of "'Think today; act for all time'" to our model is the very essence of strategic tax planning. We can incorporate this long-term perspective into the static, single-year model by introducing a few key concepts that guide the current year's decisions based on future implications.

The primary long-term tax risk in retirement is the future growth of the `Traditional_IRA` balance, which will lead to larger, forced `Required_Minimum_Distributions (RMDs)` at higher tax rates. The primary opportunity is to proactively manage your taxable income in lower-income years.

Here is a way to simplify these long-term dynamics into a less myopic static model.

### **An Enhanced Model: Acting for the Long Term**

We can add two guiding principles to the annual process.

#### **1. The `Tax_Bracket_Ceiling` Principle**

This principle establishes a proactive goal for taxable income each year, independent of spending needs. It treats unused space in low tax brackets as a valuable asset to be "harvested" annually.

* **New Core Concept:** A `Household` defines a `Desired_Tax_Bracket_Ceiling` for the year (e.g., the top of the `12%`, `22%`, or `24%` federal tax bracket).
* **New Annual Action (The "Look Ahead" Step):**
    1.  At the start of the `Year`, calculate the `Base_Taxable_Income` from all non-discretionary sources (Pensions, Social Security, RMDs).
    2.  Calculate the `Tax_Bracket_Headroom`, which is the difference between the `Desired_Tax_Bracket_Ceiling` and the `Base_Taxable_Income`.
    3.  If `Tax_Bracket_Headroom` is greater than `$0`, the model should execute a `Roth_Conversion` from the `Traditional_IRA` equal to this amount.

**Effect:** This action intentionally realizes taxable income now at a known, controlled rate. It fills up the desired tax bracket, paying tax today to reduce the principal in the `Traditional_IRA`. This directly reduces the size of the future "tax bomb" from RMDs, embodying the 'act for all time' philosophy.

#### **2. The `Preserve_the_Best_Asset` Withdrawal Strategy**

This principle re-arranges the withdrawal hierarchy for spending needs. Instead of solely minimizing this year's tax, the goal is to preserve the most valuable long-term asset, which is the `Roth_IRA` (due to its tax-free growth and lack of RMDs).

* **Modified Annual Process (The "Spending" Step):**
    1.  After accounting for the `Roth_Conversion` and all `Base_After_Tax_Income`, determine the `Remaining_Spending_Need`.
    2.  If a need exists, fulfill it using the following withdrawal hierarchy:
        * **First:** Withdraw from the `Taxable_Brokerage_Account`. This income is taxed at preferential capital gains rates (federally) but is less flexible than Roth assets.
        * **Second:** Withdraw from the `Traditional_IRA`. This creates ordinary taxable income. This should only be done if it does not push the `Retiree`'s total taxable income past their `Desired_Tax_Bracket_Ceiling`.
        * **Last:** Withdraw from the `Roth_IRA`. This tax-free source is used last to preserve it, allowing it to grow tax-free for as long as possible to be used in years where income is unexpectedly high or for late-in-life expenses.

By adding these two concepts, the model is no longer myopic. It makes strategic decisions in the current year—executing Roth conversions and thoughtfully sourcing withdrawals—with the explicit goal of creating a better financial and tax outcome over the entire life of the plan.

***
