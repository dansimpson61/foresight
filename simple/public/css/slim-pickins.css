/* slim-pickins.css */
/* Elegant, CSS-driven components for a joyful experience. */

/* 1. The Container */
/* -------------------------------------------------- */
/* This container uses Flexbox to manage the layout of its children (panels and content). */
/* This is the core of the "Expression over Specification" approach. */
.sp-container {
  display: flex;
  min-height: 100vh;
  width: 100%;
  overflow: hidden; /* Prevents scrollbars during transition */
}

/* The main content area is a flex item that will grow and shrink. */
.sp-content {
  flex-grow: 1;
  flex-shrink: 1;
  /* A smooth transition for the content area's size. */
  transition: all 0.3s ease-in-out;
}

/* 2. The Panel: Base Styles */
/* -------------------------------------------------- */
.sp-panel {
  display: flex;
  flex-shrink: 0; /* Panels do not shrink by default */
  position: relative; /* For positioning content inside */
  background-color: #f8f9fa;
  border-color: #e6e7ea;
  transition: all 0.3s ease-in-out;
}

/* 3. The Panel: Label/Handle */
/* -------------------------------------------------- */
.sp-panel__label {
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  user-select: none;
  padding: 0.75rem;
  font-weight: 600;
  color: #333;
  background-color: transparent;
  border: none;
  width: 100%;
  height: 100%;
  gap: 0.5rem;
}

.sp-panel__icon {
  font-size: 1.25em;
}

/* 4. The Panel: Content */
/* -------------------------------------------------- */
.sp-panel__content {
  padding: 1rem;
  overflow: auto;
  flex-grow: 1;
  /* Initially hidden */
  visibility: hidden;
  opacity: 0;
  transition: opacity 0.2s ease, visibility 0.2s ease;
}

/* When the panel is expanded, the content becomes visible. */
.sp-panel.is-expanded .sp-panel__content {
  visibility: visible;
  opacity: 1;
  transition-delay: 0.1s; /* Slight delay to let the panel open first */
}


/* 5. Positional Variants */
/* -------------------------------------------------- */

/* Left & Right Panels (Vertical) */
.sp-panel[data-sp-panel-position-value="left"],
.sp-panel[data-sp-panel-position-value="right"] {
  flex-direction: column;
  width: auto;
  height: 100%;
  border-right: 1px solid #e6e7ea;
}

.sp-panel[data-sp-panel-position-value="right"] {
  order: 1; /* Pushes the right panel to the end of the flex container */
  border-right: none;
  border-left: 1px solid #e6e7ea;
}

.sp-panel[data-sp-panel-position-value="left"] .sp-panel__label,
.sp-panel[data-sp-panel-position-value="right"] .sp-panel__label {
  writing-mode: vertical-rl;
  transform: rotate(180deg); /* Flips text to read bottom-to-top */
  text-align: center;
  width: 3rem; /* Default collapsed width */
  height: 100%;
}

.sp-panel[data-sp-panel-position-value="left"].is-expanded,
.sp-panel[data-sp-panel-position-value="right"].is-expanded {
  width: 280px; /* Expanded width */
}

/* Top & Bottom Panels (Horizontal) */
.sp-panel[data-sp-panel-position-value="top"],
.sp-panel[data-sp-panel-position-value="bottom"] {
  flex-direction: row;
  height: auto;
  width: 100%;
  border-bottom: 1px solid #e6e7ea;
}

/* We need to wrap the container and content in a vertical flexbox */
/* if there are top or bottom panels. */
body > .sp-container {
  flex-direction: column;
}

.sp-panel[data-sp-panel-position-value="bottom"] {
  order: 1;
  border-bottom: none;
  border-top: 1px solid #e6e7ea;
}

.sp-panel[data-sp-panel-position-value="top"] .sp-panel__label,
.sp-panel[data-sp-panel-position-value="bottom"] .sp-panel__label {
  height: 3rem; /* Default collapsed height */
  width: 100%;
}

.sp-panel[data-sp-panel-position-value="top"].is-expanded,
.sp-panel[data-sp-panel-position-value="bottom"].is-expanded {
  height: 30vh; /* Expanded height */
}

/* Hide the label text when expanded, showing only the content */
.sp-panel.is-expanded .sp-panel__label {
    display: none;
}

/* Nested panels */
.sp-panel .sp-panel {
    border: none;
}