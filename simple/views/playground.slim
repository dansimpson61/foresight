doctype html
html lang="en"
  head
    meta charset="utf-8"
    meta name="viewport" content="width=device-width, initial-scale=1"
    title Toggle Panel Playground ‚Äî Simple Foresight
    - base = request.script_name
    link rel="icon" type="image/svg+xml" href="#{base}/favicon.svg"
    link rel="stylesheet" href="#{base}/css/app.css"
  
  body
    a.sr-only href="#main" Skip to main content
    
    / LEFT PANEL: Navigation & Tools
    == toggleleft label: "Navigation", icon: "‚ò∞" do
      .stack
        h2 Navigation & Tools
        p.muted Primary workspace controls
        
        nav.stack
          h3 Pages
          ul.stack
            li: a.button href="#{base}/" Home
            li: a.button href="#{base}/playground" Playground (you are here)
            li: a.button href="#{base}/tokens" Tokens
            li: a.button href="#{base}/diagrams" Diagrams
        
        hr
        
        .stack
          h3 Quick Actions
          button.button type="button" onclick="alert('Action executed!')" 
            | ‚ö° Execute Action
          button.button type="button" onclick="console.log('Logged to console')" 
            | üìù Log Message
          button.button type="button" onclick="window.location.reload()" 
            | üîÑ Reload Page
    
    / Main content container - flows naturally in grid
    .page-container
      header
        h1 Toggle Panel Playground
        p.muted 
          | A living demonstration of edge-anchored panels. 
          | Hover to preview, click to stick.
      
      main#main
        / Introduction
        .pad.border.fill-50.stack
          h2 Welcome to the Panel Playground
          p 
            | This page demonstrates the <strong>togglepanel</strong> component‚Äîa 
            | CSS-first, progressively enhanced UI pattern for edge-anchored panels.
          
          .cluster
            p.muted Philosophy: Hover reveals, click persists.
          p.muted Tech: Slim helpers ‚Üí Stimulus ‚Üí CSS Grid natural flow
        
        hr
        
        h3 Try the Panels
        ul
          li 
            strong Left Panel: 
            | Primary navigation and tools
          li 
            strong Right Panel: 
            | Context-sensitive help and settings
          li 
            strong Top Panel: 
            | Search and filters
          li 
            strong Bottom Panel: 
            | Developer tools and diagnostics
        
        hr
        
        / Nested Panel Test Cases
        h3 Nested Panels Test Suite
        p.muted Testing recursive CSS Grid nesting patterns
        
        / Test 1: Single nested panel
        .pad.border.fill-50.stack
          h4 Test 1: Single Nested Panel
          p A panel containing another panel
          
          == toggleleft label: "Outer Panel", expanded: "30vw" do
            .stack
              p.muted This is the outer panel content
              
              == toggleright label: "Inner Panel", expanded: "15vw" do
                .stack
                  h5 Nested Inside!
                  p This panel is nested within another panel using recursive CSS Grid.
                  p No JavaScript positioning required.
              
              p More outer content here
        
        / Test 2: Multiple nested panels
        .pad.border.fill-50.stack
          h4 Test 2: Multiple Nested Panels
          p A panel containing multiple child panels
          
          == toggleleft label: "Container", expanded: "35vw" do
            .stack
              h5 Container Panel
              p This panel contains multiple nested panels
              
              == toggletop label: "Top", expanded: "8rem" do
                p Nested top panel content
              
              == toggleleft label: "Left", expanded: "10rem" do
                p Nested left panel content
              
              .content.pad
                p Main content area in the center
              
              == toggleright label: "Right", expanded: "10rem" do
                p Nested right panel content
              
              p Footer content
        
        / Test 3: Deep nesting (3 levels)
        .pad.border.fill-50.stack
          h4 Test 3: Deep Nesting (3 Levels)
          p Testing recursive grid at depth
          
          == toggleleft label: "Level 1", expanded: "40vw" do
            .stack
              h5 Level 1
              p Outermost panel
              
              == toggleleft label: "Level 2", expanded: "25vw" do
                .stack
                  h5 Level 2
                  p Middle panel
                  
                  == toggleleft label: "Level 3", expanded: "15vw" do
                    .stack
                      h5 Level 3
                      p Innermost panel - three levels deep!
                      p All positioned by CSS Grid recursion.
                  
                  p Back to level 2
              
              p Back to level 1
        
        .cluster
          a.button href="#{base}/" ‚Üê Back to App
          a.button href="#{base}/tokens" Design Tokens
          a.button href="#{base}/diagrams" Object Diagrams
    
    / RIGHT PANEL: Help & Settings
    == toggleright label: "Help", icon: "‚ùì" do
      .stack
        h2 Help & Reference
        p.muted Context-sensitive assistance
        
        .stack
          h3 About Toggle Panels
          p 
            | Toggle panels are edge-anchored containers that expand on hover 
            | and persist when clicked.
          
          dl
            dt Hover
            dd Panel expands temporarily (CSS <code>:hover</code>)
            
            dt Click
            dd Panel toggles sticky state (JS manages class)
            
            dt Nested
            dd Panels can contain other panels
        
        hr
        
        .stack
          h3 Keyboard Shortcuts
          dl
            dt Tab
            dd Navigate to panel handle
            
            dt Enter / Space
            dd Toggle sticky state
            
            dt Esc
            dd Close panel (if implemented)
        
        hr
        
        .stack
          h3 Documentation
          p For full documentation, see the reference guide.
          a.button href="https://github.com/dansimpson/foresight/blob/main/togglepanel_reference.md" target="_blank" rel="noopener" Read Togglepanel Reference

    / TOP PANEL: Search & Filters
    == toggletop label: "Search & Filters", icon: "üîç" do
      .stack
        h2 Search & Filters
        p.muted Find and filter content
        
        form.stack
          .stack
            label for="search-query" Search
            input#search-query type="search" placeholder="Type to search..." 
                  style="width: 100%; padding: 0.5rem; border: 1px solid var(--border); border-radius: var(--radius-1);"
          
          .stack
            label Filter by Type
            .cluster
              label style="display: inline-flex; gap: 0.35rem;"
                input type="checkbox" name="filter" value="panels"
                | Panels
              label style="display: inline-flex; gap: 0.35rem;"
                input type="checkbox" name="filter" value="controls"
                | Controls
              label style="display: inline-flex; gap: 0.35rem;"
                input type="checkbox" name="filter" value="data"
                | Data
          
          button.button type="submit" Apply Filters

    / BOTTOM PANEL: Developer Tools
    == togglebottom label: "Dev Tools", icon: "üõ†" do
      .stack
        h2 Developer Tools
        p.muted Diagnostics and debugging helpers
        
        .stack
          h3 Panel State
          pre style="background: var(--paper-50); padding: var(--sp-12); border: 1px solid var(--border); border-radius: var(--radius-1); overflow: auto;"
            code
              |
                {
                  "panels": {
                    "left": { "position": "left", "sticky": false },
                    "right": { "position": "right", "sticky": false },
                    "top": { "position": "top", "sticky": false },
                    "bottom": { "position": "bottom", "sticky": false }
                  },
                  "viewport": {
                    "width": window.innerWidth + "px",
                    "height": window.innerHeight + "px"
                  }
                }
        
        hr
        
        .cluster
          button.button type="button" onclick="console.clear()" Clear Console
          button.button type="button" onclick="console.table([{panel:'left',state:'ready'},{panel:'right',state:'ready'},{panel:'top',state:'ready'},{panel:'bottom',state:'ready'}])" 
            | Log Panel Status
          button.button type="button" onclick="alert(document.querySelectorAll('[data-controller~=toggle-panel]').length + ' panels found')" 
            | Count Panels

    / Load scripts
    == render :slim, :'partials/_scripts'
    
    / Optional: Demo controller for playground interactions
    script
      |
        (function(){
          if (!window.Stimulus || !Stimulus.Application) return;
          const app = Stimulus.Application.start();
          
          // Simple demo controller for playground
          class PlaygroundController extends Stimulus.Controller {
            connect() {
              console.log('[Playground] Ready. Try the edge panels!');
            }
            
            ping() {
              alert('Pong! Playground is interactive.');
            }
          }
          
          // Register if not already registered
          try {
            app.register('playground', PlaygroundController);
            document.body.setAttribute('data-controller', 'playground');
          } catch(e) {
            // Already registered, skip
          }
        })();
